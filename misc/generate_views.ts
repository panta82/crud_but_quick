#!/usr/bin/env ts-node-script

require('ts-node').register();

import * as libPath from 'path';

const ROOT_DIR = libPath.resolve(__dirname, '../');
const TARGET_FILE = libPath.resolve(ROOT_DIR, './src/types/views.ts');
const TARGET_DIR = libPath.dirname(TARGET_FILE);

import * as prettier from 'prettier';

const sections = [
  ['Shared', 'shared_views'],
  ['List', 'list_views'],
  ['Edit', 'edit_views'],
  ['Detail', 'detail_views'],
];

const lines = [
  `// Generated by "generate_views.ts", do not edit manually.
	
import { safeAssign } from '${libPath.relative(
    TARGET_DIR,
    libPath.resolve(ROOT_DIR, './src') + '/tools'
  )}';`,
];

for (const [title, filename] of sections) {
  lines.push(
    `import * as ${title} from '${libPath.relative(
      TARGET_DIR,
      libPath.resolve(ROOT_DIR, `./src/views`) + '/' + filename
    )}';`
  );
}

lines.push(`
export class CUIViews {`);

for (const [title, filename] of sections) {
  lines.push('', '// ' + title, '');
  const exp = require('../src/views/' + filename);
  for (const name in exp) {
    lines.push(`public ${name} = ${title}.${name};`);
  }
}

lines.push(`
constructor(source?: Partial<CUIViews>) {
	safeAssign(this, source);
}
}`);

prettier.resolveConfig(TARGET_FILE).then(options => {
  const formatted = prettier.format(lines.join('\n'), {
    ...options,
    filepath: TARGET_FILE,
  });
  console.log(formatted);
});
